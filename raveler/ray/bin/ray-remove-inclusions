#!/usr/bin/env python

# ensure imported package is local to this executable

import os
import sys

this_dir = os.path.realpath(sys.argv[0])
pkg_dir = os.path.realpath(os.path.join(this_dir, '..'))
sys.path.insert(0, pkg_dir)

from ray import imio, agglo
import argparse
import logging

def main(argv):
    parser = argparse.ArgumentParser(
        description='Perform inclusion removal on input stack and export ' +
        'to Raveler')
    parser.add_argument('fin', nargs=2,
        help='A partially proofread exported Raveler volume and grayscale directory')
    parser.add_argument('--output-name', type=str,
        help='Name of directory where resegmented volume will be added',
        dest='output_name', default='./raveler-export')
    args = parser.parse_args()

    MasterLogger = logging.getLogger('ray-reresegment')
    MasterLogger.propagate = False
    MasterLogger.setLevel(logging.DEBUG)
    console = logging.StreamHandler(sys.stdout)
    console.setLevel(logging.INFO)
    
    formatter = logging.Formatter('%(levelname)-8s %(message)s')
    console.setFormatter(formatter)
    MasterLogger.addHandler(console)

    dname, fname = os.path.split(args.output_name) 

    if dname != "":
        if not os.path.exists(dname):
            os.makedirs(dname)

    current_stack = imio.read_image_stack(args.fin[0])
    current_stack[:,0,0] = current_stack[:,0,1]
    image_stack = imio.read_image_stack(args.fin[1])
    
    MasterLogger.info("Rag building") 
    rag = agglo.Rag(current_stack, nozeros=True)        
    MasterLogger.info("Finished Rag building with " + 
        str(rag.number_of_nodes()) + " nodes") 

    MasterLogger.info("Starting inclusion removal")
    rag.remove_inclusions()  
    MasterLogger.info("Finished inclusion removal with "
        + str(rag.number_of_nodes()) + " nodes") 
    
    MasterLogger.info("Exporting volume")
    seg = rag.get_segmentation()
    rav = imio.segs_to_raveler(seg, seg, 0, do_conn_comp=False)
    imio.write_to_raveler(*rav, directory=args.output_name, gray=image_stack)
    
if __name__ == "__main__":
    sys.exit(main(sys.argv))
